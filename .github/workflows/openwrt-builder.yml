name: OpenWrt Builder

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0'
  repository_dispatch:
  workflow_dispatch:

env:
  BUILD_SCRIPT: build-scripts.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      firmware_json: ${{ steps.extract_firmware_info.outputs.firmware_json }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@master
        
      - name: Initialization compile environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # CPU信息
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          
          # 内存信息
          free -h

          # 磁盘信息
          df -hT
          
          # 内核信息
          uname -a
          
          [ -f /proc/version ] && cat /proc/version
          [ -f /etc/issue.net ] && cat /etc/issue.net
          [ -f /etc/issue ] && cat /etc/issue
          
          # 资源信息
          ulimit -a

      - name: Set compile scripts
        run: |
          # 脚本路径
          scripts_path="$GITHUB_WORKSPACE/scripts"
          if [ ! -d "${scripts_path}" ]; then
              echo "脚本路径 '$scripts_path' 不存在!"
              exit 1
          fi
          
          # 执行脚本
          build_script="$GITHUB_WORKSPACE/$BUILD_SCRIPT"
          if [ ! -f "$build_script" ]; then
              echo "执行脚本 '$build_script' 不存在!"
              exit 1
          fi
          
          # 赋予权限
          chmod +x "$build_script"
          find "$scripts_path" -type f -exec chmod +x {} \;
          
          echo "scripts_path=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "scripts_file=$build_script" >> $GITHUB_ENV

      - name: Run compile scripts
        id: compile-scripts
        run: |
          scripts_file=${{ env.scripts_file }}
          
          # 执行脚本
          if [ -x "${scripts_file}" ]; then
              source ${scripts_file} 1
          fi
          
          # 检查固件信息
          if [ -z "${FIRMWARE_JSON_OBJECT}" ]; then
              echo "未生成固件,请检查!"
              exit 1
          fi
          
          echo "$FIRMWARE_JSON_OBJECT" > $GITHUB_WORKSPACE/firmware.json
          
      - name: Extract Firmware Details
        id: extract_firmware_info
        run: |
          firmware_json_file="$GITHUB_WORKSPACE/firmware.json"
          
          firmware_name=$(jq -r '.name' "$firmware_json_file")
          echo "firmware_name=$firmware_name" >> "$GITHUB_OUTPUT"
          
          firmware_path=$(jq -r '.path' "$firmware_json_file")
          echo "firmware_path=$firmware_path" >> "$GITHUB_OUTPUT"
          
          firmware_files=$(jq -r '.firmware[].file' "firmware_json_file" | tr '\n' ' ')
          
          firmware_json=$(jq -c '.' "$firmware_json_file")
          echo "firmware_json=$firmware_json" >> "$GITHUB_OUTPUT"
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: ${{ steps.extract_firmware_info.outputs.firmware_name }}
          path: ${{ steps.extract_firmware_info.outputs.firmware_path }}
          retention-days: 7
          compression-level: 0
          
      - name: Create Release Tags
        id: create_release_tags
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H.%M")" >> ${GITHUB_OUTPUT}
          
          echo "
            ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")
            🌐 管理地址: 192.168.2.1
          " >> release.txt
          
      - name: Upload Firmware Release
        uses: softprops/action-gh-release@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          name: ${{ steps.extract_firmware_info.outputs.firmware_name }}
          tag_name: ${{ steps.create_release_tags.outputs.release_tag }}
          files: ${{ steps.extract_firmware_info.outputs.firmware_path }}/*.img.gz
          body_path: release.txt
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2  # main
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
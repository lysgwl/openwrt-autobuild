name: OpenWrt Builder

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0'
  repository_dispatch:
  workflow_dispatch:

env:
  BUILD_SCRIPT: build-scripts.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      firmware-json: ${{ env.FIRMWARE_JSON }} 
      # firmware-json: ${{ steps.print.outputs.firmware-json }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@master
        
      - name: Initialization compile environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 运行脚本路径
          scripts_path="${GITHUB_WORKSPACE}/scripts"  
          if [ ! -d "${scripts_path}" ]; then
              echo "script path does not exist, please check!"  
              exit 1
          fi

          # 查找脚本并赋予权限
          find $GITHUB_WORKSPACE/scripts -exec chmod +x {} \;

          # 检查执行脚本
          scripts_file="${GITHUB_WORKSPACE}/scripts/${BUILD_SCRIPT}"
          if [ ! -e "${scripts_file}" ]; then
              echo "script files does not exist, please check!"
              exit 1
          fi

          # 检查磁盘空间
          df -hT
          
          echo "scripts_path=${scripts_path}" >> $GITHUB_ENV
          echo "scripts_file=${scripts_file}" >> $GITHUB_ENV

      - name: Run compile scripts
        id: compile
        working-directory: ${{ env.scripts_path }}
        run: |
          # 执行脚本
          scripts_file=${{ env.scripts_file }}
          if [ -x "${scripts_file}" ]; then
              source ${scripts_file} 1
          fi

          # 检查固件信息
          if [ -z "${OPENWRT_FIRMWARE_JSON}" ]; then
              echo "firmware does not exist, please check!"
              exit 1
          fi
          
          # 将 JSON 字符串进行 Base64 编码
          ENCODED_JSON=$(echo -n "${OPENWRT_FIRMWARE_JSON}" | base64 | tr -d '\n')
          
          # 将 Base64 编码的字符串保存到 GITHUB_ENV
          echo "FIRMWARE_JSON=${ENCODED_JSON}" >> $GITHUB_ENV
          
      - name: Print decode info
        id: print
        run: |
          # 从 GITHUB_ENV 获取 Base64 编码的 JSON 字符串
          ENCODED_JSON="${{ env.FIRMWARE_JSON }}"
          
          # Base64 解码 JSON 字符串
          FIRMWARE_JSON=$(echo "$ENCODED_JSON" | base64 --decode)
          
          # 打印解码后的 JSON 数据
          echo "$FIRMWARE_JSON"
  upload:
    needs: build
    runs-on: ubuntu-22.04
    
    steps:
      - name: Decode firmware info
        run: |
          # 获取 Base64 编码的 JSON 字符串
          ENCODED_JSON="${{ needs.build.outputs.firmware-json }}"

          # Base64 解码 JSON 字符串
          FIRMWARE_JSON=$(echo "$ENCODED_JSON" | base64 --decode)

          # 打印解码后的 JSON 数据
          echo "$FIRMWARE_JSON"
          echo "${{ fromJson($FIRMWARE_JSON).name }}"

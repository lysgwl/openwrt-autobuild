name: OpenWrt Builder

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0'
  repository_dispatch:
  workflow_dispatch:

env:
  BUILD_SCRIPT: build-scripts.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      firmware-json: ${{ steps.generate-matrix.outputs.firmware_json }} 
      firmware_matrix: ${{ steps.generate-matrix.outputs.firmware_matrix  }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
        
      - name: Initialization compile environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 运行脚本路径
          scripts_path="${GITHUB_WORKSPACE}/scripts"  
          if [ ! -d "${scripts_path}" ]; then
              echo "Script path does not exist, Please check!"  
              exit 1
          fi

          # 查找脚本并赋予权限
          find $GITHUB_WORKSPACE/scripts -exec chmod +x {} \;

          # 检查执行脚本
          scripts_file="${GITHUB_WORKSPACE}/scripts/${BUILD_SCRIPT}"
          if [ ! -e "${scripts_file}" ]; then
              echo "Script files does not exist, Please check!"
              exit 1
          fi

          # 检查磁盘空间
          df -hT
          
          echo "scripts_path=${scripts_path}" >> $GITHUB_ENV
          echo "scripts_file=${scripts_file}" >> $GITHUB_ENV

      - name: Run compile scripts
        id: compile-scripts
        working-directory: ${{ env.scripts_path }}
        run: |
          # 执行脚本
          scripts_file=${{ env.scripts_file }}
          if [ -x "${scripts_file}" ]; then
              source ${scripts_file} 1
          fi

          # 检查固件信息
          if [ -z "${OPENWRT_FIRMWARE_JSON}" ]; then
              echo "Firmware does not exist, Please check!"
              exit 1
          fi
          
          # 将 JSON 字符串进行 Base64 编码
          ENCODED_JSON=$(echo -n "${OPENWRT_FIRMWARE_JSON}" | base64 | tr -d '\n')
          
          # 将 Base64 编码的字符串保存到 GITHUB_ENV
          echo "FIRMWARE_JSON=${ENCODED_JSON}" >> $GITHUB_ENV

      - name: Create Matrix configuration
        id: generate-matrix
        env:
          # 获取 Base64 编码的 JSON 字符串
          ENCODED_FIRMWARE_JSON: ${{ env.FIRMWARE_JSON }}
        run: |
          # Base64 解码 JSON 字符串
          FIRMWARE_JSON=$(echo "$ENCODED_FIRMWARE_JSON" | base64 --decode)

          # 验证 JSON 并生成矩阵配置
          if ! jq empty --argjson json "$FIRMWARE_JSON" > /dev/null; then
              echo "Invalid JSON: $FIRMWARE_JSON"
              exit 1
          fi

          # 生成矩阵配置
          FIRMWARE_MATRIX=$(jq -c '.[]' <<< "$FIRMWARE_JSON")

          # 矩阵配置 Base64 编码
          ENCODED_MATRIX=$(echo "$FIRMWARE_MATRIX" | base64)
          
          # 设置输出
          # echo "firmware_json=$(echo "$FIRMWARE_JSON" | jq -s .)" >> $GITHUB_OUTPUT
          echo "firmware_matrix=$ENCODED_MATRIX" >> $GITHUB_OUTPUT

      - name: Check test
        run: |   
          ENCODED_MATRIX="${{ steps.generate-matrix.outputs.firmware_matrix }}"
          echo "$ENCODED_MATRIX"

          FIRMWARE_MATRIX=$(echo "$ENCODED_MATRIX" | base64 --decode)
          echo $FIRMWARE_MATRIX

          echo "MATRIX_NAME=$(echo "$FIRMWARE_MATRIX" | jq -r '.[0].name')"

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2  # main
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0 
          
      
